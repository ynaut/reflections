R1: When would you want to use a remote repository rather than keeping all your work local?
When I need to acess the project from different computers or if I need other people to be able to acess it.
When I want others to be able to see and use the project.

R2: Why might you want to always pull changes manually rather than having 
Git automatically stay up-to-date with your remote repository?
If several people are working on the same project the files might be out of sync.
Also if work has been done on different computers the automatic commits
might conflict with each other

R3: Describe the differences between forks, clones, and branches. When would you use one instead of another?
Forks are basicly just clones of others projects on GitHub which link back to the original project.
If I would like to add to, fix a bug in or modify a public project on GitHub I would use a fork.
Then the original creator would get credit for his/her work and it would 
be easier for them to implement changes that I have made in the original.

Clones are just copies of projects, which can be made locally aswell as remote. 
Clones can be used to clone projects from other sources than github

Branches are branches of commits of the project-
Branches are useful when working on a project and wanting to do
experimental changes or doing special versions of the project.
Just generally useful whilst coding to keep structure and have 
back-up code so that you can run it.

R4: What is the benefit of having a copy of the last known state of the remote stored locally?
If for example you are working on the code and someone else has updated the
remote repository. Then you can look at this and implement the changes that might be
needed to merge the two versions.

R5: How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
Without git and Github I would probably use dropbox or a similar storing service to collaborate. 
Here the advantage is that everything gets updated immediately, assuming that you have internet access. 
One big problem would be that there wouldn't be an easy way to merge the work
of two or more people on the same file, if they hade been working on it at the same
time. 

R6: When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
When you think that the changes you introduce might create problems with the code, like
adding a new experemential feature which you won't be able to test properly before
pushing it to github.

The disadvantage is mainly that it is a little more complicated and time consuming to
merge in the different branches. A big advantage though is that you can work
progressively on making the branches compatible and also recieve input from other
collaborators what you could do to make it work. It is a way of better controlling what
happens with the project